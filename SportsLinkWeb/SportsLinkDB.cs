#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SportsLink
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fbtennis")]
	public partial class SportsLinkDB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccept(Accept instance);
    partial void UpdateAccept(Accept instance);
    partial void DeleteAccept(Accept instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCourt(Court instance);
    partial void UpdateCourt(Court instance);
    partial void DeleteCourt(Court instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertTennisUser(TennisUser instance);
    partial void UpdateTennisUser(TennisUser instance);
    partial void DeleteTennisUser(TennisUser instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public SportsLinkDB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsLinkDB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsLinkDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SportsLinkDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Accept> Accept
		{
			get
			{
				return this.GetTable<Accept>();
			}
		}
		
		public System.Data.Linq.Table<City> City
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Court> Court
		{
			get
			{
				return this.GetTable<Court>();
			}
		}
		
		public System.Data.Linq.Table<Message> Message
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offer
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<TennisUser> TennisUser
		{
			get
			{
				return this.GetTable<TennisUser>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CoordinateDistanceMiles", IsComposable=true)]
		[return: global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")]
		public System.Nullable<double> CoordinateDistanceMiles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Latitude1", DbType="Float")] System.Nullable<double> latitude1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Longitude1", DbType="Float")] System.Nullable<double> longitude1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Latitude2", DbType="Float")] System.Nullable<double> latitude2, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Longitude2", DbType="Float")] System.Nullable<double> longitude2)
		{
			return ((System.Nullable<double>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), latitude1, longitude1, latitude2, longitude2).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accept")]
	public partial class Accept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OfferId;
		
		private long _FacebookId;
		
		private bool _Accepted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferIdChanging(System.Guid value);
    partial void OnOfferIdChanged();
    partial void OnFacebookIdChanging(long value);
    partial void OnFacebookIdChanged();
    partial void OnAcceptedChanging(bool value);
    partial void OnAcceptedChanged();
    #endregion
		
		public Accept()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OfferId
		{
			get
			{
				return this._OfferId;
			}
			set
			{
				if ((this._OfferId != value))
				{
					this.OnOfferIdChanging(value);
					this.SendPropertyChanging();
					this._OfferId = value;
					this.SendPropertyChanged("OfferId");
					this.OnOfferIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FacebookId
		{
			get
			{
				return this._FacebookId;
			}
			set
			{
				if ((this._FacebookId != value))
				{
					this.OnFacebookIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookId = value;
					this.SendPropertyChanged("FacebookId");
					this.OnFacebookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accepted", DbType="Bit NOT NULL")]
		public bool Accepted
		{
			get
			{
				return this._Accepted;
			}
			set
			{
				if ((this._Accepted != value))
				{
					this.OnAcceptedChanging(value);
					this.SendPropertyChanging();
					this._Accepted = value;
					this.SendPropertyChanged("Accepted");
					this.OnAcceptedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LocationId;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _Name;
		
		private EntitySet<Offer> _Offer;
		
		private EntitySet<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIdChanging(long value);
    partial void OnLocationIdChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Offer = new EntitySet<Offer>(new Action<Offer>(this.attach_Offer), new Action<Offer>(this.detach_Offer));
			this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Offer_City", Storage="_Offer", ThisKey="LocationId", OtherKey="PreferredLocationId", DeleteRule="NO ACTION")]
		public EntitySet<Offer> Offer
		{
			get
			{
				return this._Offer;
			}
			set
			{
				this._Offer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_City", Storage="_User", ThisKey="LocationId", OtherKey="CityId", DeleteRule="CASCADE")]
		public EntitySet<User> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offer(Offer entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Offer(Offer entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_User(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Court")]
	public partial class Court : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CourtId;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private string _Name;
		
		private EntitySet<Offer> _Offer;
		
		private EntitySet<TennisUser> _TennisUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourtIdChanging(System.Guid value);
    partial void OnCourtIdChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Court()
		{
			this._Offer = new EntitySet<Offer>(new Action<Offer>(this.attach_Offer), new Action<Offer>(this.detach_Offer));
			this._TennisUser = new EntitySet<TennisUser>(new Action<TennisUser>(this.attach_TennisUser), new Action<TennisUser>(this.detach_TennisUser));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourtId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CourtId
		{
			get
			{
				return this._CourtId;
			}
			set
			{
				if ((this._CourtId != value))
				{
					this.OnCourtIdChanging(value);
					this.SendPropertyChanging();
					this._CourtId = value;
					this.SendPropertyChanged("CourtId");
					this.OnCourtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Float")]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Float")]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Offer_Court", Storage="_Offer", ThisKey="CourtId", OtherKey="PreferredCourtId", DeleteRule="NO ACTION")]
		public EntitySet<Offer> Offer
		{
			get
			{
				return this._Offer;
			}
			set
			{
				this._Offer.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TennisUser_Court", Storage="_TennisUser", ThisKey="CourtId", OtherKey="PreferredCourtId", DeleteRule="NO ACTION")]
		public EntitySet<TennisUser> TennisUser
		{
			get
			{
				return this._TennisUser;
			}
			set
			{
				this._TennisUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offer(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Court = this;
		}
		
		private void detach_Offer(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Court = null;
		}
		
		private void attach_TennisUser(TennisUser entity)
		{
			this.SendPropertyChanging();
			entity.Court = this;
		}
		
		private void detach_TennisUser(TennisUser entity)
		{
			this.SendPropertyChanging();
			entity.Court = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FacebookMessageId;
		
		private System.Guid _OfferId;
		
		private long _SentTo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacebookMessageIdChanging(long value);
    partial void OnFacebookMessageIdChanged();
    partial void OnOfferIdChanging(System.Guid value);
    partial void OnOfferIdChanged();
    partial void OnSentToChanging(long value);
    partial void OnSentToChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookMessageId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FacebookMessageId
		{
			get
			{
				return this._FacebookMessageId;
			}
			set
			{
				if ((this._FacebookMessageId != value))
				{
					this.OnFacebookMessageIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookMessageId = value;
					this.SendPropertyChanged("FacebookMessageId");
					this.OnFacebookMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OfferId
		{
			get
			{
				return this._OfferId;
			}
			set
			{
				if ((this._OfferId != value))
				{
					this.OnOfferIdChanging(value);
					this.SendPropertyChanging();
					this._OfferId = value;
					this.SendPropertyChanged("OfferId");
					this.OnOfferIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SentTo", DbType="BigInt NOT NULL")]
		public long SentTo
		{
			get
			{
				return this._SentTo;
			}
			set
			{
				if ((this._SentTo != value))
				{
					this.OnSentToChanging(value);
					this.SendPropertyChanging();
					this._SentTo = value;
					this.SendPropertyChanged("SentTo");
					this.OnSentToChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OfferId;
		
		private long _FacebookId;
		
		private System.DateTime _PostDateUtc;
		
		private System.DateTime _MatchDateUtc;
		
		private long _PreferredLocationId;
		
		private System.Nullable<long> _AcceptedById;
		
		private string _Message;
		
		private bool _Completed;
		
		private string _Score;
		
		private string _RequestComments;
		
		private string _AcceptComments;
		
		private System.Nullable<long> _SpecificOpponentId;
		
		private System.Nullable<System.Guid> _PreferredCourtId;
		
		private EntityRef<City> _City;
		
		private EntityRef<Court> _Court;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOfferIdChanging(System.Guid value);
    partial void OnOfferIdChanged();
    partial void OnFacebookIdChanging(long value);
    partial void OnFacebookIdChanged();
    partial void OnPostDateUtcChanging(System.DateTime value);
    partial void OnPostDateUtcChanged();
    partial void OnMatchDateUtcChanging(System.DateTime value);
    partial void OnMatchDateUtcChanged();
    partial void OnPreferredLocationIdChanging(long value);
    partial void OnPreferredLocationIdChanged();
    partial void OnAcceptedByIdChanging(System.Nullable<long> value);
    partial void OnAcceptedByIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnScoreChanging(string value);
    partial void OnScoreChanged();
    partial void OnRequestCommentsChanging(string value);
    partial void OnRequestCommentsChanged();
    partial void OnAcceptCommentsChanging(string value);
    partial void OnAcceptCommentsChanged();
    partial void OnSpecificOpponentIdChanging(System.Nullable<long> value);
    partial void OnSpecificOpponentIdChanged();
    partial void OnPreferredCourtIdChanging(System.Nullable<System.Guid> value);
    partial void OnPreferredCourtIdChanged();
    #endregion
		
		public Offer()
		{
			this._City = default(EntityRef<City>);
			this._Court = default(EntityRef<Court>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfferId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OfferId
		{
			get
			{
				return this._OfferId;
			}
			set
			{
				if ((this._OfferId != value))
				{
					this.OnOfferIdChanging(value);
					this.SendPropertyChanging();
					this._OfferId = value;
					this.SendPropertyChanged("OfferId");
					this.OnOfferIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookId", DbType="BigInt NOT NULL")]
		public long FacebookId
		{
			get
			{
				return this._FacebookId;
			}
			set
			{
				if ((this._FacebookId != value))
				{
					this.OnFacebookIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookId = value;
					this.SendPropertyChanged("FacebookId");
					this.OnFacebookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDateUtc", DbType="DateTime NOT NULL")]
		public System.DateTime PostDateUtc
		{
			get
			{
				return this._PostDateUtc;
			}
			set
			{
				if ((this._PostDateUtc != value))
				{
					this.OnPostDateUtcChanging(value);
					this.SendPropertyChanging();
					this._PostDateUtc = value;
					this.SendPropertyChanged("PostDateUtc");
					this.OnPostDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDateUtc", DbType="DateTime NOT NULL")]
		public System.DateTime MatchDateUtc
		{
			get
			{
				return this._MatchDateUtc;
			}
			set
			{
				if ((this._MatchDateUtc != value))
				{
					this.OnMatchDateUtcChanging(value);
					this.SendPropertyChanging();
					this._MatchDateUtc = value;
					this.SendPropertyChanged("MatchDateUtc");
					this.OnMatchDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredLocationId", DbType="BigInt NOT NULL")]
		public long PreferredLocationId
		{
			get
			{
				return this._PreferredLocationId;
			}
			set
			{
				if ((this._PreferredLocationId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferredLocationIdChanging(value);
					this.SendPropertyChanging();
					this._PreferredLocationId = value;
					this.SendPropertyChanged("PreferredLocationId");
					this.OnPreferredLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptedById", DbType="BigInt")]
		public System.Nullable<long> AcceptedById
		{
			get
			{
				return this._AcceptedById;
			}
			set
			{
				if ((this._AcceptedById != value))
				{
					this.OnAcceptedByIdChanging(value);
					this.SendPropertyChanging();
					this._AcceptedById = value;
					this.SendPropertyChanged("AcceptedById");
					this.OnAcceptedByIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="NVarChar(150)")]
		public string Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestComments", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string RequestComments
		{
			get
			{
				return this._RequestComments;
			}
			set
			{
				if ((this._RequestComments != value))
				{
					this.OnRequestCommentsChanging(value);
					this.SendPropertyChanging();
					this._RequestComments = value;
					this.SendPropertyChanged("RequestComments");
					this.OnRequestCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcceptComments", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string AcceptComments
		{
			get
			{
				return this._AcceptComments;
			}
			set
			{
				if ((this._AcceptComments != value))
				{
					this.OnAcceptCommentsChanging(value);
					this.SendPropertyChanging();
					this._AcceptComments = value;
					this.SendPropertyChanged("AcceptComments");
					this.OnAcceptCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificOpponentId", DbType="BigInt")]
		public System.Nullable<long> SpecificOpponentId
		{
			get
			{
				return this._SpecificOpponentId;
			}
			set
			{
				if ((this._SpecificOpponentId != value))
				{
					this.OnSpecificOpponentIdChanging(value);
					this.SendPropertyChanging();
					this._SpecificOpponentId = value;
					this.SendPropertyChanged("SpecificOpponentId");
					this.OnSpecificOpponentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredCourtId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PreferredCourtId
		{
			get
			{
				return this._PreferredCourtId;
			}
			set
			{
				if ((this._PreferredCourtId != value))
				{
					if (this._Court.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferredCourtIdChanging(value);
					this.SendPropertyChanging();
					this._PreferredCourtId = value;
					this.SendPropertyChanged("PreferredCourtId");
					this.OnPreferredCourtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Offer_City", Storage="_City", ThisKey="PreferredLocationId", OtherKey="LocationId", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Offer.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Offer.Add(this);
						this._PreferredLocationId = value.LocationId;
					}
					else
					{
						this._PreferredLocationId = default(long);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Offer_Court", Storage="_Court", ThisKey="PreferredCourtId", OtherKey="CourtId", IsForeignKey=true)]
		public Court Court
		{
			get
			{
				return this._Court.Entity;
			}
			set
			{
				Court previousValue = this._Court.Entity;
				if (((previousValue != value) 
							|| (this._Court.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Court.Entity = null;
						previousValue.Offer.Remove(this);
					}
					this._Court.Entity = value;
					if ((value != null))
					{
						value.Offer.Add(this);
						this._PreferredCourtId = value.CourtId;
					}
					else
					{
						this._PreferredCourtId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Court");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TennisUser")]
	public partial class TennisUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FacebookId;
		
		private double _Rating;
		
		private System.Nullable<long> _USTAId;
		
		private System.Nullable<double> _TravelRadius;
		
		private string _PlayStyle;
		
		private string _SinglesDoubles;
		
		private bool _CurrentAvailability;
		
		private System.Nullable<System.Guid> _PreferredCourtId;
		
		private EntityRef<Court> _Court;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacebookIdChanging(long value);
    partial void OnFacebookIdChanged();
    partial void OnRatingChanging(double value);
    partial void OnRatingChanged();
    partial void OnUSTAIdChanging(System.Nullable<long> value);
    partial void OnUSTAIdChanged();
    partial void OnTravelRadiusChanging(System.Nullable<double> value);
    partial void OnTravelRadiusChanged();
    partial void OnPlayStyleChanging(string value);
    partial void OnPlayStyleChanged();
    partial void OnSinglesDoublesChanging(string value);
    partial void OnSinglesDoublesChanged();
    partial void OnCurrentAvailabilityChanging(bool value);
    partial void OnCurrentAvailabilityChanged();
    partial void OnPreferredCourtIdChanging(System.Nullable<System.Guid> value);
    partial void OnPreferredCourtIdChanged();
    #endregion
		
		public TennisUser()
		{
			this._Court = default(EntityRef<Court>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FacebookId
		{
			get
			{
				return this._FacebookId;
			}
			set
			{
				if ((this._FacebookId != value))
				{
					this.OnFacebookIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookId = value;
					this.SendPropertyChanged("FacebookId");
					this.OnFacebookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Float NOT NULL")]
		public double Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USTAId", DbType="BigInt")]
		public System.Nullable<long> USTAId
		{
			get
			{
				return this._USTAId;
			}
			set
			{
				if ((this._USTAId != value))
				{
					this.OnUSTAIdChanging(value);
					this.SendPropertyChanging();
					this._USTAId = value;
					this.SendPropertyChanged("USTAId");
					this.OnUSTAIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelRadius", DbType="Float")]
		public System.Nullable<double> TravelRadius
		{
			get
			{
				return this._TravelRadius;
			}
			set
			{
				if ((this._TravelRadius != value))
				{
					this.OnTravelRadiusChanging(value);
					this.SendPropertyChanging();
					this._TravelRadius = value;
					this.SendPropertyChanged("TravelRadius");
					this.OnTravelRadiusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayStyle", DbType="VarChar(1024)")]
		public string PlayStyle
		{
			get
			{
				return this._PlayStyle;
			}
			set
			{
				if ((this._PlayStyle != value))
				{
					this.OnPlayStyleChanging(value);
					this.SendPropertyChanging();
					this._PlayStyle = value;
					this.SendPropertyChanged("PlayStyle");
					this.OnPlayStyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SinglesDoubles", DbType="NVarChar(20)")]
		public string SinglesDoubles
		{
			get
			{
				return this._SinglesDoubles;
			}
			set
			{
				if ((this._SinglesDoubles != value))
				{
					this.OnSinglesDoublesChanging(value);
					this.SendPropertyChanging();
					this._SinglesDoubles = value;
					this.SendPropertyChanged("SinglesDoubles");
					this.OnSinglesDoublesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentAvailability", DbType="Bit NOT NULL")]
		public bool CurrentAvailability
		{
			get
			{
				return this._CurrentAvailability;
			}
			set
			{
				if ((this._CurrentAvailability != value))
				{
					this.OnCurrentAvailabilityChanging(value);
					this.SendPropertyChanging();
					this._CurrentAvailability = value;
					this.SendPropertyChanged("CurrentAvailability");
					this.OnCurrentAvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferredCourtId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PreferredCourtId
		{
			get
			{
				return this._PreferredCourtId;
			}
			set
			{
				if ((this._PreferredCourtId != value))
				{
					if (this._Court.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPreferredCourtIdChanging(value);
					this.SendPropertyChanging();
					this._PreferredCourtId = value;
					this.SendPropertyChanged("PreferredCourtId");
					this.OnPreferredCourtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_TennisUser_Court", Storage="_Court", ThisKey="PreferredCourtId", OtherKey="CourtId", IsForeignKey=true)]
		public Court Court
		{
			get
			{
				return this._Court.Entity;
			}
			set
			{
				Court previousValue = this._Court.Entity;
				if (((previousValue != value) 
							|| (this._Court.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Court.Entity = null;
						previousValue.TennisUser.Remove(this);
					}
					this._Court.Entity = value;
					if ((value != null))
					{
						value.TennisUser.Add(this);
						this._PreferredCourtId = value.CourtId;
					}
					else
					{
						this._PreferredCourtId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Court");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _FacebookId;
		
		private string _Name;
		
		private long _CityId;
		
		private bool _Gender;
		
		private System.DateTime _Birthday;
		
		private string _Email;
		
		private int _TimeZoneOffset;
		
		private bool _EmailOffers;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacebookIdChanging(long value);
    partial void OnFacebookIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityIdChanging(long value);
    partial void OnCityIdChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnBirthdayChanging(System.DateTime value);
    partial void OnBirthdayChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTimeZoneOffsetChanging(int value);
    partial void OnTimeZoneOffsetChanged();
    partial void OnEmailOffersChanging(bool value);
    partial void OnEmailOffersChanged();
    #endregion
		
		public User()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FacebookId
		{
			get
			{
				return this._FacebookId;
			}
			set
			{
				if ((this._FacebookId != value))
				{
					this.OnFacebookIdChanging(value);
					this.SendPropertyChanging();
					this._FacebookId = value;
					this.SendPropertyChanged("FacebookId");
					this.OnFacebookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="BigInt NOT NULL")]
		public long CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(1024) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZoneOffset", DbType="Int NOT NULL")]
		public int TimeZoneOffset
		{
			get
			{
				return this._TimeZoneOffset;
			}
			set
			{
				if ((this._TimeZoneOffset != value))
				{
					this.OnTimeZoneOffsetChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneOffset = value;
					this.SendPropertyChanged("TimeZoneOffset");
					this.OnTimeZoneOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailOffers", DbType="Bit NOT NULL")]
		public bool EmailOffers
		{
			get
			{
				return this._EmailOffers;
			}
			set
			{
				if ((this._EmailOffers != value))
				{
					this.OnEmailOffersChanging(value);
					this.SendPropertyChanging();
					this._EmailOffers = value;
					this.SendPropertyChanged("EmailOffers");
					this.OnEmailOffersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_City", Storage="_City", ThisKey="CityId", OtherKey="LocationId", IsForeignKey=true, DeleteOnNull=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.User.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._CityId = value.LocationId;
					}
					else
					{
						this._CityId = default(long);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
